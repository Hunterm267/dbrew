Decoded BB at ?+0:
                   ?:  31 c0                 xor     %eax,%eax
                 ?+2:  4c 8b 17              mov     (%rdi),%r10
                 ?+5:  4d 85 d2              test    %r10,%r10
                 ?+8:  74 3a                 je      $?+68
Decoded BB at ?+a:
                ?+10:  66 0f ef c0           pxor    %xmm0,%xmm0
                ?+14:  48 83 c7 08           add     $0x8,%rdi
                ?+18:  49 89 c8              mov     %rcx,%r8
                ?+21:  4c 03 47 08           add     0x8(%rdi),%r8
                ?+25:  49 89 d1              mov     %rdx,%r9
                ?+28:  4c 03 0f              add     (%rdi),%r9
                ?+31:  4e 8b 04 c6           mov     (%rsi,%r8,8),%r8
                ?+35:  f2 43 0f 10 0c c8     movsd   (%r8,%r9,8),%xmm1
                ?+41:  f2 0f 59 4f 10        mulsd   0x10(%rdi),%xmm1
                ?+46:  f2 0f 58 c1           addsd   %xmm1,%xmm0
                ?+50:  48 83 c7 18           add     $0x18,%rdi
                ?+54:  48 ff c0              inc     %rax
                ?+57:  4c 39 d0              cmp     %r10,%rax
                ?+60:  75 d4                 jne     $?+18
Decoded BB at ?+3e:
                ?+62:  66 48 0f 7e c0        movq    %xmm0,%rax
                ?+67:  c3                    ret    
Decoded BB at ?+44:
                ?+68:  c3                    ret    
; ModuleID = '<llengine>'
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nounwind readonly
define i64 @test(i8* noalias, i8* noalias nocapture readonly, i8*, i8*, i8* nocapture readnone, i8* nocapture readnone) #0 {
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 8, !asm.reg.r10 !0
  %9 = icmp eq i64 %8, 0, !asm.flag.zf !0
  br i1 %9, label %46, label %10

; <label>:10                                      ; preds = %6
  %11 = ptrtoint i8* %0 to i64
  %12 = ptrtoint i8* %2 to i64
  %13 = ptrtoint i8* %3 to i64
  %14 = add i64 %11, 8, !asm.reg.rdi !0
  %15 = bitcast i8* %1 to i64*
  br label %19

; <label>:16                                      ; preds = %19
  %17 = phi i128 [ %42, %19 ]
  %18 = trunc i128 %17 to i64, !asm.reg.rax !0
  ret i64 %18

; <label>:19                                      ; preds = %19, %10
  %20 = phi i64 [ 0, %10 ], [ %44, %19 ]
  %21 = phi i64 [ %14, %10 ], [ %43, %19 ]
  %22 = phi i128 [ 0, %10 ], [ %42, %19 ]
  %23 = inttoptr i64 %21 to i64*
  %24 = getelementptr i64, i64* %23, i64 1
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %13, !asm.reg.r8 !0
  %27 = load i64, i64* %23, align 8
  %28 = add i64 %27, %12, !asm.reg.r9 !0
  %29 = getelementptr i64, i64* %15, i64 %26
  %30 = bitcast i64* %29 to double**
  %31 = load double*, double** %30, align 8
  %32 = getelementptr double, double* %31, i64 %28
  %33 = load double, double* %32, align 8
  %34 = inttoptr i64 %21 to double*
  %35 = getelementptr double, double* %34, i64 2
  %36 = load double, double* %35, align 8
  %37 = fmul double %33, %36
  %38 = bitcast i128 %22 to <2 x double>
  %39 = extractelement <2 x double> %38, i32 0
  %40 = fadd double %39, %37
  %41 = insertelement <2 x double> %38, double %40, i64 0
  %42 = bitcast <2 x double> %41 to i128, !asm.reg.xmm0 !0
  %43 = add i64 %21, 24, !asm.reg.rdi !0
  %44 = add i64 %20, 1, !asm.reg.rax !0
  %45 = icmp eq i64 %44, %8
  br i1 %45, label %16, label %19

; <label>:46                                      ; preds = %6
  ret i64 0
}

attributes #0 = { nounwind readonly }

!0 = !{}

Result: 3.400000
Result: 3.400000
