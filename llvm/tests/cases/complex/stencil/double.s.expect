Decoded BB at ?+0:
                   ?:  31 c0                 xor     %eax,%eax
                 ?+2:  4c 8b 17              mov     (%rdi),%r10
                 ?+5:  4d 85 d2              test    %r10,%r10
                 ?+8:  74 3a                 je      $?+68
Decoded BB at ?+44:
                ?+68:  c3                    ret    
Decoded BB at ?+a:
                ?+10:  66 0f ef c0           pxor    %xmm0,%xmm0
                ?+14:  48 83 c7 08           add     $0x8,%rdi
                ?+18:  49 89 c8              mov     %rcx,%r8
                ?+21:  4c 03 47 08           add     0x8(%rdi),%r8
                ?+25:  49 89 d1              mov     %rdx,%r9
                ?+28:  4c 03 0f              add     (%rdi),%r9
                ?+31:  4e 8b 04 c6           mov     (%rsi,%r8,8),%r8
                ?+35:  f2 43 0f 10 0c c8     movsd   (%r8,%r9,8),%xmm1
                ?+41:  f2 0f 59 4f 10        mulsd   0x10(%rdi),%xmm1
                ?+46:  f2 0f 58 c1           addsd   %xmm1,%xmm0
                ?+50:  48 83 c7 18           add     $0x18,%rdi
                ?+54:  48 ff c0              inc     %rax
                ?+57:  4c 39 d0              cmp     %r10,%rax
                ?+60:  75 d4                 jne     $?+18
Decoded BB at ?+3e:
                ?+62:  66 48 0f 7e c0        movq    %xmm0,%rax
                ?+67:  c3                    ret    
; ModuleID = '<llengine>'
target triple = "x86_64-redhat-linux-gnu"

; Function Attrs: nounwind readnone
declare i8 @llvm.ctpop.i8(i8) #0

; Function Attrs: nounwind readnone
declare void @llvm.donothing() #0

; Function Attrs: readonly
define i64 @test(i8* noalias, i8* noalias nocapture readonly, i8*, i8*, i8* nocapture readnone, i8* nocapture readnone) #1 {
  %7 = bitcast i8* %0 to i64*
  %8 = load i64, i64* %7, align 8, !asm.reg.r10 !0
  %9 = icmp eq i64 %8, 0, !asm.flag.zf !0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %6
  ret i64 0

; <label>:11                                      ; preds = %6
  %12 = ptrtoint i8* %0 to i64
  %13 = ptrtoint i8* %2 to i64
  %14 = ptrtoint i8* %3 to i64
  %15 = add i64 %12, 8, !asm.reg.rdi !0
  %16 = bitcast i8* %1 to i64*
  br label %17

; <label>:17                                      ; preds = %17, %11
  %18 = phi i64 [ 0, %11 ], [ %43, %17 ]
  %19 = phi i64 [ %15, %11 ], [ %42, %17 ]
  %20 = phi i256 [ bitcast (<2 x i128> <i128 0, i128 undef> to i256), %11 ], [ %41, %17 ]
  %21 = inttoptr i64 %19 to i64*
  %22 = getelementptr i64, i64* %21, i64 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %14, !asm.reg.r8 !0
  %25 = load i64, i64* %21, align 8
  %26 = add i64 %25, %13, !asm.reg.r9 !0
  %27 = getelementptr i64, i64* %16, i64 %24
  %28 = bitcast i64* %27 to double**
  %29 = load double*, double** %28, align 8
  %30 = getelementptr double, double* %29, i64 %26
  %31 = load double, double* %30, align 8
  %32 = inttoptr i64 %19 to double*
  %33 = getelementptr double, double* %32, i64 2
  %34 = load double, double* %33, align 8
  %35 = fmul double %31, %34
  %36 = trunc i256 %20 to i64
  %37 = bitcast i64 %36 to double
  %38 = fadd double %37, %35
  %39 = bitcast i256 %20 to <4 x double>
  %40 = insertelement <4 x double> %39, double %38, i64 0
  %41 = bitcast <4 x double> %40 to i256, !asm.reg.xmm0 !0
  %42 = add i64 %19, 24, !asm.reg.rdi !0
  %43 = add i64 %18, 1, !asm.reg.rax !0
  %44 = icmp eq i64 %43, %8
  br i1 %44, label %45, label %17

; <label>:45                                      ; preds = %17
  %.lcssa = phi i256 [ %41, %17 ]
  %46 = trunc i256 %.lcssa to i64, !asm.reg.rax !0
  ret i64 %46
}

attributes #0 = { nounwind readnone }
attributes #1 = { readonly }

!0 = !{}

Result: 3.400000
Result: 3.400000
