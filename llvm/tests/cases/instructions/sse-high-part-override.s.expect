Decoded BB at ?+0:
                   ?:  66 0f 10 07           movupd  (%rdi),%xmm0
                 ?+4:  66 0f 10 0e           movupd  (%rsi),%xmm1
                 ?+8:  f2 0f 58 c1           addsd   %xmm1,%xmm0
                ?+12:  66 0f 29 07           movapd  %xmm0,(%rdi)
                ?+16:  f2 0f 10 07           movsd   (%rdi),%xmm0
                ?+20:  f2 0f 10 0e           movsd   (%rsi),%xmm1
                ?+24:  f2 0f 58 c1           addsd   %xmm1,%xmm0
                ?+28:  f2 0f 11 07           movsd   %xmm0,(%rdi)
                ?+32:  31 c0                 xor     %eax,%eax
                ?+34:  c3                    ret    
; ModuleID = '<llengine>'
target triple = "x86_64-redhat-linux-gnu"

; Function Attrs: nounwind readnone
declare i8 @llvm.ctpop.i8(i8) #0

; Function Attrs: nounwind readnone
declare void @llvm.donothing() #0

define i64 @test(i8* nocapture, i8* noalias nocapture readonly, i8* nocapture readnone, i8* nocapture readnone, i8* nocapture readnone, i8* nocapture readnone) {
  %7 = bitcast i8* %0 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = shufflevector <2 x double> %8, <2 x double> undef, <4 x i32> <i32 undef, i32 1, i32 undef, i32 undef>
  %10 = bitcast i8* %1 to <2 x double>*
  %11 = load <2 x double>, <2 x double>* %10, align 8
  %12 = extractelement <2 x double> %8, i32 0
  %13 = extractelement <2 x double> %11, i32 0
  %14 = fadd double %12, %13
  %15 = insertelement <4 x double> %9, double %14, i64 0
  %.bc = bitcast <4 x double> %15 to <2 x i128>
  %.extract = extractelement <2 x i128> %.bc, i32 0
  %16 = shufflevector <4 x double> %15, <4 x double> undef, <2 x i32> <i32 0, i32 1>
  store <2 x double> %16, <2 x double>* %7, align 8
  %17 = bitcast i8* %0 to double*
  %trunc = trunc i128 %.extract to i64
  %bitcast = bitcast i64 %trunc to double
  %18 = fadd double %13, %bitcast
  store double %18, double* %17, align 8
  ret i64 0
}

attributes #0 = { nounwind readnone }

Result: 0 5.000000 2.000000 3.000000 3.000000
Result: 0 5.000000 2.000000 3.000000 3.000000
